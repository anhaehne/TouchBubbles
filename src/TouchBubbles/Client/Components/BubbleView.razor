@using TouchBubbles.Shared.Models
@using TouchBubbles.Client.Models.Bubbles
@using TouchBubbles.Client.Services
@inject IJSRuntime JsRuntime;
@inject ISettingsService SettingsService

<div class="bubble">
    <div class="bubble-content">
        <h3 class="bubble-name">@Model.Name</h3>
        <BubbleSlider
            BackgroundColor="@Model.BackgroundColor"
            BackgroundOutline="@Model.BackgroundColorOutline"
            Icon="@Model.Icon"
            SliderColor="Red"
            @bind-SlidingValue="Model.SlidingValue"
            SupportsSlidingValue="Model.SupportsSlidingValue"
            OnClick="OnBubbleClickedAsync"/>
    </div>
    <div class="bubble-controls" style="display: @(_areBubbleControlsEnabled ? "initial" : "none")">
        <button>
            <span class="mdi mdi-arrow-left"></span>
        </button>

        <button>
            <span class="mdi mdi-delete"></span>
        </button>

        <button>
            <span class="mdi mdi-arrow-right"></span>
        </button>
    </div>
</div>

@code {

    private bool _areBubbleControlsEnabled = false;

    [Parameter]
    public Bubble Model
    {
        get => _model ??= new Bubble();
        set => _model = value;
    }

    ElementReference SvgReference { get; set; }

    protected override void OnParametersSet()
    {
        if (Model is EntityBubble entityBubble)
        {
            entityBubble.BubbleChanged += OnEntityChanged;
            SettingsService.BubbleControlsEnabledChanged += (sender, enabled) =>
            {
                _areBubbleControlsEnabled = enabled;
                StateHasChanged();
            };
        }
    }

    private void OnEntityChanged()
    {
        StateHasChanged();
    }

    private async void OnBubbleClickedAsync()
    {
        await Model.OnClickAsync();
    }

    private Bubble? _model;
}