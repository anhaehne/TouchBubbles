@using TouchBubbles.Client.Services
@using TouchBubbles.Shared.Models.HomeAssistant
@using System.Reactive.Linq
@inject IEntityService EntityService
@inject IProfileService ProfileService
@inject IOverlayService OverlayService

<div class="select-entities-overlay">
    <h3 class="header">Select entities</h3>
    <div class="entities">
        @foreach (var model in _entities)
        {
            <div class="entity">
                <input type="checkbox" @onchange="@(e => { 

                                                      var isSelected = (e.Value as bool?) ?? false;

                                                    if (isSelected)
                                                    {
                                                        ProfileService.ActiveProfile.Value.EntityIds.Add(model.Entity.Id);
                                                    }
                                                    else
                                                    {
                                                        ProfileService.ActiveProfile.Value.EntityIds.Remove(model.Entity.Id);
                                                    }
                                                })" checked="@model.IsSelected" />
                <span class="mdi @model.Entity.Icon"></span>
                @($"{model.Entity.Name} ({model.Entity.Type})")
            </div>
        }
    </div>
</div>

@code {

    private IReadOnlyCollection<EntityModel> _entities = Array.Empty<EntityModel>();

    protected override Task OnInitializedAsync()
    {
        var activeEntitiesIds = ProfileService.ActiveProfile.SelectMany(p => p.EntityIds.ToCollectionObservable());

        activeEntitiesIds.Subscribe(collection => Console.WriteLine("activeIdsChanged"));

        EntityService.Entities
            .Select(e => e.OrderBy(e => e.Type).ThenBy(e => e.Name).ToList())
            .Zip(activeEntitiesIds, (entities, selectedIds) => entities.Select(e => new EntityModel(e) {IsSelected = selectedIds.Contains(e.Id)}).ToList())
            .Subscribe(entityModels =>
            {
                _entities = entityModels;
                StateHasChanged();
            });

        return Task.CompletedTask;
    }

    public class EntityModel
    {
        public EntityModel(Entity entity)
        {
            Entity = entity;
        }

        public Entity Entity { get; }

        public bool IsSelected { get; set; }
    }
}
