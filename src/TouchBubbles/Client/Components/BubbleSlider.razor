@using System.Threading
@using TouchBubbles.Shared.Models.HomeAssistant
@inject IJSRuntime JsRuntime;

<div @onclick="OnClick" class="bubble-container @(IsActive ? "active" : string.Empty)">
    <svg class="bubble-background" viewBox="0 0 100 100" preserveAspectRatio="xMidYMin slice" @ref="SvgReference">

        <defs>
            <clipPath id="@_id">
                <rect x="0" y="99" width="100" height="100" />
            </clipPath>
        </defs>
        <circle cx="50" cy="50" r="49" fill="@(IsActive ? BackgroundColor : "#444")"></circle>
        <circle cx="50" cy="50" r="48" fill="transparent" stroke="black" opacity="0.3" stroke-width="2"></circle>

        @if (SupportsSlidingValue)
        {
            <circle cx="50" cy="50" r="47" fill="yellow" opacity="0.5" clip-path="url(#@_id)"></circle>
        }
    </svg>
    <span class="bubble-icon mdi @Icon"></span>
</div>

@code {

    [Parameter]
    public bool IsActive { get; set; } = true;

    [Parameter]
    public bool SupportsSlidingValue { get; set; }

    [Parameter]
    public float SlidingValue
    {
        get => _slidingValue;
        set
        {
            if(Math.Abs(_slidingValue - value) < 0.001)
                return;

            _slidingValue = value;
            UpdateSlidingValue(value);
        }
    }

    [Parameter]
    public string Icon { get; set; } = "mdi-puzzle";

    [Parameter]
    public string BackgroundColor { get; set; } = "#FFFFFF";

    [Parameter]
    public string SliderColor { get; set; } = "#FFFFFF";

    [Parameter]
    public EventCallback<float> SlidingValueChanged { get; set; }

    [Parameter]
    public EventCallback OnClick { get; set; }

    private ElementReference SvgReference { get; set; }
    private int JsReference { get; set; }

    private string _id = Guid.NewGuid().ToString();
    private float _slidingValue;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var viewModelReference = DotNetObjectReference.Create(this);
            JsReference = await JsRuntime.InvokeAsync<int>("DraggableSvg.Create", viewModelReference, SvgReference, SlidingValue, true);
        }
    }

    [JSInvokable]
    public async void OnSlidingValueChanged(float newValue)
    {
        _slidingValue = newValue;
        await SlidingValueChanged.InvokeAsync(newValue);
    }

    private async void UpdateSlidingValue(float newValue)
    {
        if (JsReference == 0)
            return;

        await JsRuntime.InvokeVoidAsync("DraggableSvg.SetSlidingValue", JsReference, newValue);
    }
}
