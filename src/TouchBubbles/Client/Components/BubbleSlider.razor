@using System.Threading
@inject IJSRuntime JsRuntime;

<div @onclick="OnClick">
    <svg class="bubble-background" viewBox="0 0 100 100" preserveAspectRatio="xMidYMin slice"
         @ref="SvgReference"
         @ontouchstart="TouchStart"
         @ontouchmove="TouchMove">

        @if (SupportsSlidingValue)
        {
            <defs>
                <clipPath id="@_id">
                    <rect x="0" y="@(100 - Math.Round(SlidingValue * 100))" width="100" height="@(Math.Round(SlidingValue * 100))" />
                </clipPath>
            </defs>
        }

        <circle cx="50" cy="50" r="49" stroke="@BackgroundOutline" stroke-width="2" fill="@BackgroundColor"></circle>
        <circle cx="50" cy="50" r="48" fill="red" clip-path="url(#@_id)"></circle>
    </svg>
    <span class="bubble-icon mdi @Icon"></span>
</div>

@code {

    [Parameter]
    public bool SupportsSlidingValue { get; set; }

    [Parameter]
    public float SlidingValue { get; set; }

    [Parameter]
    public string Icon { get; set; }

    [Parameter]
    public string BackgroundColor { get; set; }

    [Parameter]
    public string BackgroundOutline { get; set; }

    [Parameter]
    public string SliderColor { get; set; }

    [Parameter]
    public bool Enabled { get; set; }

    [Parameter]
    public EventCallback<float> SlidingValueChanged { get; set; }

    [Parameter]
    public EventCallback OnClick { get; set; }

    private ElementReference SvgReference { get; set; }

    private double _touchStartY;
    private float _slidingValueStart;
    private string _id = Guid.NewGuid().ToString();
    private bool? _isVerticalMove;
    private Point _start;
    private long _touchIdentifier;

    private async Task TouchStart(TouchEventArgs obj)
    {
        var touchPoint = obj.Touches.First();
        _touchIdentifier = touchPoint.Identifier;
        await DragStartAsync(new Point(touchPoint.ClientX, touchPoint.ClientY));
    }

    private async Task TouchMove(TouchEventArgs obj)
    {
        if (!Enabled)
            return;

        var touch = obj.ChangedTouches.SingleOrDefault(t => t.Identifier == _touchIdentifier);

        if (touch == null)
            return;

        await DragAsync(new Point(touch.ClientX, touch.ClientY));
    }

    /// <summary>
    /// Checks if the move between two points is mostly vertical. The maximum angle is +/- 45° of 90° and 270°.
    /// </summary>
    /// <param name="from">The start point of the move.</param>
    /// <param name="to">The end point of the move.</param>
    /// <returns>Whether or not the move is vertical.</returns>
    private static bool IsVerticalMove(Point from, Point to)
    {
        var radian = Math.Atan2((from.Y - to.Y), (from.X - to.X));
        var angle = (radian * (180 / Math.PI) + 360) % 360;

        return angle >= 45 && angle < 135 // Vertical move up
               || angle >= 225 && angle < 315; // Vertical move down
    }

    private async Task DragStartAsync(Point start)
    {
        if (!Enabled)
            return;

        _start = start;
        _isVerticalMove = null;
        _slidingValueStart = SlidingValue;
        _touchStartY = await JsRuntime.InvokeAsync<double>("DraggableSvg.GetMousePositionY", SvgReference, _start.Y);
    }

    private async Task DragAsync(Point newPosition)
    {
        _isVerticalMove ??= IsVerticalMove(_start, newPosition);

        if (_isVerticalMove != true)
            return;

        var currentY = await JsRuntime.InvokeAsync<double>("DraggableSvg.GetMousePositionY", SvgReference, newPosition.Y);

        var deltaY = (currentY - _touchStartY) / 100;

        SlidingValue = Math.Max(Math.Min(_slidingValueStart - (float)deltaY, 100), 0);
        await SlidingValueChanged.InvokeAsync(SlidingValue);
    }

    private readonly struct Point
    {
        public Point(double x, double y)
        {
            X = x;
            Y = y;
        }

        public double X { get; }

        public double Y { get; }
    }
}
