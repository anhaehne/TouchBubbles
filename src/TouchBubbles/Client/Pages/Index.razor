@page "/"
@using TouchBubbles.Client.Services
@using TouchBubbles.Shared.Models
@using TouchBubbles.Client.Components
@using TouchBubbles.Client.Models.Bubbles
@inject IOverlayService OverlayService;
@inject IEntityService EntityService;
@inject IJSRuntime JsRuntime;
@inject IProfileService ProfileService;
@inject IBubbleFactory BubbleFactory;

<div class="swiper-container">
    <div class="swiper-wrapper">
        @for (var i = 0; i < _bubbles.Count; i++)
        {
            var index = i;
            var bubble = _bubbles[i];

            <div class="swiper-slide">
                <BubbleView Model="bubble" Index="index" ActiveIndex="_activeIndex" />
            </div>
        }
    </div>
    <!-- Add Pagination -->
    <div class="swiper-pagination"></div>
    <div class="gradient-overlay"></div>
</div>

@code
{
    private int _activeIndex;
    private IList<Bubble> _bubbles = new List<Bubble>();
    private IList<Bubble> _defaultBubbles = new List<Bubble>();

    protected override async Task OnInitializedAsync()
    {
        _defaultBubbles = GetDefaultBubbles();
        _bubbles = _defaultBubbles.ToList();

        await EntityService.InitializeAsync();
        await ProfileService.InitializeAsync();

        ProfileService.ActiveProfileChanged += (sender, profile) =>
        {
            _bubbles = _defaultBubbles.ToList();
            UpdateBubbles();
        };
        UpdateBubbles();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var viewModelReference = DotNetObjectReference.Create(this);
            await JsRuntime.InvokeAsync<string>("Swiper.Initialize", viewModelReference);
            return;
        }

        await UpdateSlidesAsync();
    }

    private void UpdateBubbles()
    {
        var entityBubbles = _bubbles.OfType<EntityBubble>().ToList();
        var removedBubbles = entityBubbles.Where(x => !ProfileService.ActiveProfile.Entities.Contains(x.Entity));

        foreach (var removedBubble in removedBubbles)
            _bubbles.Remove(removedBubble);

        for (var i = 0; i < ProfileService.ActiveProfile.Entities.Count; i++)
        {
            if (i < entityBubbles.Count && entityBubbles[i].Entity == ProfileService.ActiveProfile.Entities[i])
                continue;

            var newBubble = BubbleFactory.CreateBubble(ProfileService.ActiveProfile.Entities[i]);

            entityBubbles.Insert(i, newBubble);
            _bubbles.Insert(i, newBubble);
        }

        StateHasChanged();
    }

    private IList<Bubble> GetDefaultBubbles()
    {
        return new List<Bubble>
        {
            new Bubble
            {
                BackgroundColor = "LightGray",
                BackgroundColorOutline = "Gray",
                Name = "Settings",
                Icon = "mdi-cog-outline"
            },
            new AddEntityBubble(OverlayService),
            new ReloadBubble(JsRuntime),
            new SelectProfileBubble(OverlayService),
        };
    }

    private async Task UpdateSlidesAsync()
    {
        await JsRuntime.InvokeAsync<string>("Swiper.Update", Array.Empty<object>());
    }

    [JSInvokable]
    public void OnActiveIndexChanged(int newIndex)
    {
        _activeIndex = newIndex;
        StateHasChanged();
    }
}