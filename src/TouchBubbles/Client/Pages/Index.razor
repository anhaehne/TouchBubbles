@page "/"
@using TouchBubbles.Client.Services
@using TouchBubbles.Shared.Models
@using TouchBubbles.Client.Components
@using TouchBubbles.Client.Models.Bubbles
@using System.Reactive.Linq
@using TouchBubbles.Shared.Models.HomeAssistant
@inherits RxComponentBase
@inject IOverlayService OverlayService;
@inject IEntityService EntityService;
@inject IJSRuntime JsRuntime;
@inject IProfileService ProfileService;
@inject IBubbleFactory BubbleFactory;

<div class="swiper-container">
    <div class="swiper-wrapper">
        @foreach (var bubble in _bubbles)
        {
            <div class="swiper-slide">
                <BubbleView Model="bubble" />
            </div>
        }
    </div>
    <!-- Add Pagination -->
    <div class="swiper-pagination"></div>
    @*<div class="gradient-overlay"></div>*@
</div>

@code
{
    private IReadOnlyCollection<Bubble> _bubbles = Array.Empty<Bubble>();
    private IReadOnlyCollection<Bubble> _defaultBubbles = Array.Empty<Bubble>();

    protected override async Task OnInitializedAsync()
    {
        _defaultBubbles = GetDefaultBubbles();

        var bubbles = ProfileService
            .ActiveProfile
            .SelectMany(p => p.Entities)
            .Select(CreateBubbles);

        this.UpdatePropertyWith(bubbles, t => t._bubbles);

        await EntityService.InitializeAsync();
        await ProfileService.InitializeAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var viewModelReference = DotNetObjectReference.Create(this);
            await JsRuntime.InvokeAsync<string>("Swiper.Initialize", viewModelReference);
            return;
        }

        await UpdateSlidesAsync();
    }


    private IReadOnlyCollection<Bubble> CreateBubbles(IReadOnlyCollection<Entity> entities)
    {
        return entities.Select(e => BubbleFactory.CreateBubble(e)).Concat(_defaultBubbles).ToList();
    }

    private IReadOnlyCollection<Bubble> GetDefaultBubbles()
    {
        return new List<Bubble>
        {
            new Bubble
            {
                BackgroundColor = "LightGray",
                BackgroundColorOutline = "Gray",
                Name = "Settings",
                Icon = "mdi-cog-outline"
            },
            new SelectEntitiesBubble(OverlayService),
            new ReloadBubble(JsRuntime),
            new SelectProfileBubble(OverlayService),
        };
    }

    private async Task UpdateSlidesAsync()
    {
        await JsRuntime.InvokeAsync<string>("Swiper.Update", Array.Empty<object>());
    }
}