@page "/"
@using TouchBubbles.Client.Services
@using TouchBubbles.Client.ViewModels
@using TouchBubbles.Shared.Models
@using TouchBubbles.Client.Components
@inject IEntityService EntityService;
@inject IJSRuntime JsRuntime;

<div class="swiper-container">
    <div class="swiper-wrapper">
        @for (var i = 0; i < _bubbles.Count; i++)
        {
            var index = i;
            var bubble = _bubbles[i];

            <div class="swiper-slide">
                <BubbleView Model="bubble" Index="index" ActiveIndex="_activeIndex"/>
            </div>
        }
    </div>
    <!-- Add Pagination -->
    <div class="swiper-pagination"></div>
</div>


@code
{
    private int _activeIndex;
    private readonly IList<Bubble> _bubbles = new List<Bubble>
    {
        new Bubble
        {
            BackgroundColor = "Gray",
            Name = "Settings",
            Icon = "mdi-cog-outline"
        },
        new Bubble
        {
            BackgroundColor = "LightGray",
            Name = "Add entity",
            Icon = "mdi-plus"
        }
    };

    protected override async Task OnInitializedAsync()
    {
        await EntityService.InitializeAsync();

        foreach (var entity in EntityService.Entities.Where(x => x.Type == "light").Reverse())
        {
            _bubbles.Insert(0, new LightBubble(entity, EntityService));
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var viewModelReference = DotNetObjectReference.Create(this);
            await JsRuntime.InvokeAsync<string>("Swiper.Initialize", viewModelReference);
            return;
        }

        await UpdateSlidesAsync();
    }

    private async Task UpdateSlidesAsync()
    {
        await JsRuntime.InvokeAsync<string>("Swiper.Update", Array.Empty<object>());
    }

    [JSInvokable]
    public void OnActiveIndexChanged(int newIndex)
    {
        _activeIndex = newIndex;
        StateHasChanged();
    }
}