@page "/"
@using TouchBubbles.Client.Services
@using TouchBubbles.Client.ViewModels
@using TouchBubbles.Shared.Models
@inject IEntityService EntityService;
@inject IJSRuntime JsRuntime;

<div class="swiper-container">
    <div class="swiper-wrapper">
        @foreach (var bubble in _bubbles)
        {
            <div class="swiper-slide">
                <div class="bubble">
                    <div class="bubble-content">
                        <h3 class="bubble-name">@bubble.Name</h3>
                        <div @onclick="async () => await OnBubbleClickedAsync(bubble)">
                            <svg class="bubble-background" viewBox="0 0 100 100" preserveAspectRatio="xMidYMin slice">
                                <circle cx="50" cy="50" r="49" stroke="@bubble.BackgroundOutline" stroke-width="2" fill="@bubble.BackgroundColor"></circle>
                            </svg>
                            <span class="bubble-icon mdi @bubble.Icon"></span>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    <!-- Add Pagination -->
    <div class="swiper-pagination"></div>
</div>


@code
{
    private readonly IList<Bubble> _bubbles = new List<Bubble>
    {
        new Bubble
        {
            BackgroundColor = "Gray",
            Name = "Settings",
            Icon = "mdi-cog-outline"
        },
        new Bubble
        {
            BackgroundColor = "Transparent",
            BackgroundOutline = "LightGray",
            Name = "Add entity",
            Icon = "mdi-plus"
        }
    };

    protected override async Task OnInitializedAsync()
    {
        var entities = await EntityService.GetEntitiesAsync();

        foreach (var entity in entities.Where(x => x.Type == "light").Reverse())
        {
            _bubbles.Insert(0, new LightBubble(entity, EntityService));
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeAsync<string>("Swiper.Initialize", Array.Empty<object>());
            return;
        }

        await UpdateSlidesAsync();
    }

    private async Task UpdateSlidesAsync()
    {
        await JsRuntime.InvokeAsync<string>("Swiper.Update", Array.Empty<object>());
    }

    private async Task OnBubbleClickedAsync(Bubble bubble)
    {
        // make sure only the active bubble can be clicked. This will be fun once we implement more touch/mouse interactions ...
        var activeIndex = await JsRuntime.InvokeAsync<int>("Swiper.ActiveIndex", Array.Empty<object>());
        if (_bubbles.IndexOf(bubble) != activeIndex)
            return;

        await bubble.OnClickAsync();
    }
}